"""empty message

Revision ID: b0dcc369aaa6
Revises: 
Create Date: 2025-09-09 15:40:31.089281

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b0dcc369aaa6'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('root_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('\n            (parent_id IS NULL AND root_id IS NULL) OR \n            (parent_id IS NOT NULL AND root_id IS NOT NULL)\n            ', name=op.f('ck__category__check_parent_root_consistency')),
    sa.ForeignKeyConstraint(['parent_id'], ['category.id'], name=op.f('fk__category__parent_id__category'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['root_id'], ['category.id'], name=op.f('fk__category__root_id__category'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__category')),
    sa.UniqueConstraint('id', name=op.f('uq__category__id'))
    )
    op.create_index(op.f('ix__category__root_id'), 'category', ['root_id'], unique=False)
    op.create_table('client',
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('address', sa.TEXT(), nullable=True),
    sa.Column('email', sa.TEXT(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__client')),
    sa.UniqueConstraint('id', name=op.f('uq__client__id')),
    sa.UniqueConstraint('name', name=op.f('uq__client__name'))
    )
    op.create_table('product',
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('price', sa.INTEGER(), nullable=False),
    sa.Column('amount', sa.INTEGER(), server_default='0', nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('amount >= 0', name=op.f('ck__product__check_non_negative_amount')),
    sa.CheckConstraint('price >= 0', name=op.f('ck__product__check_positive_price')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__product')),
    sa.UniqueConstraint('id', name=op.f('uq__product__id'))
    )
    op.create_table('order',
    sa.Column('client_id', sa.UUID(), nullable=True),
    sa.Column('status', postgresql.ENUM('forming', 'paid', 'delivering', 'done', 'cancelled', name='order_status_enum'), server_default='forming', nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name=op.f('fk__order__client_id__client'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__order')),
    sa.UniqueConstraint('id', name=op.f('uq__order__id'))
    )
    op.create_table('order_item',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.INTEGER(), server_default='1', nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('amount > 0', name=op.f('ck__order_item__check_positive_amount')),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], name=op.f('fk__order_item__order_id__order'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name=op.f('fk__order_item__product_id__product'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__order_item')),
    sa.UniqueConstraint('id', name=op.f('uq__order_item__id'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('order_item')
    op.drop_table('order')
    op.drop_table('product')
    op.drop_table('client')
    op.drop_index(op.f('ix__category__root_id'), table_name='category')
    op.drop_table('category')
    # ### end Alembic commands ###
