[project]
name = "category_tree"
version = "0.1.0"
description = ""
authors = [
    {name = "Frolov Daniil", email = "aliskaxy@yandex.ru"}
]
readme = "README.md"
requires-python = ">=3.13"
packages = []


# DEPENDENCIES


[tool.poetry.dependencies]
fastapi = "^0.116.1"
pydantic = "^2.11.7"
sqlalchemy = "^2.0.43"
alembic = "^1.16.5"
psycopg2 = "^2.9.10"
asyncpg = "^0.30.0"
pydantic-settings = "^2.10.1"
sqlalchemy-utils = "^0.42.0"
uvicorn = "^0.35.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-aiohttp = "^1.1.0"
pytest-cov = "^6.3.0"
pylint = "^3.3.8"
mypy = "^1.17.1"
isort = "^6.0.1"
httpx = "^0.28.1"
configargparse = "^1.7.1"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


# PYTEST


[tool.pytest]
python_files = "test_*.py"
python_classes = ["*Test", "Test*"]
python_functions = "test_*"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "# pragma: no cover",
    "def __repr__",
    "def __str__",
    "def __unicode__",
]
show_missing = true
skip_empty = true
omit = [
  "*/__init__.py",
]

[tool.coverage.html]
directory = "pytest-cov-report"

[tool.coverage.run]
branch = true
concurrency = ['thread', 'greenlet']

[tool.pytest.ini_options]
asyncio_mode = "auto"


# LINTERS


[tool.pylint.master]
extension-pkg-allow-list = ["pydantic"]

[tool.pylint.format]
max-line-length = 120

[tool.pylint.basic]
good-names = ["db"]

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "C0114",  # missing-module-docstring
  "C0116",  # missing-function-docstring
  "R0903",  # too-few-public-methods (for sqlalchemy tables and pydantic classes)
  "C0115",  # missing-class-docstring (for api routes)
]

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[tool.isort]
known_local_folder = "category_tree"
lines_after_imports = 2
multi_line_output = 3
line_length = 120
include_trailing_comma = true



